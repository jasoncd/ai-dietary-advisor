import { useState } from "react";
import { useMutation } from "@tanstack/react-query";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
import { 
  Utensils, 
  Info, 
  User, 
  Calendar,
  Users,
  Weight,
  Apple,
  Heart,
  Pill,
  Activity,
  Target,
  Brain, 
  Settings, 
  TriangleAlert, 
  Bot, 
  Clock, 
  Copy, 
  Plus, 
  Share, 
  Lightbulb, 
  UserCheck, 
  TrendingUp,
  Shield,
  Check,
  Mail,
  MessageCircle,
  ExternalLink,
  X
} from "lucide-react";
import { dietaryAdviceRequestSchema, type DietaryAdviceResponse } from "@shared/schema";

export default function Home() {
  const [aiResponse, setAiResponse] = useState<DietaryAdviceResponse | null>(null);
  const [showOutput, setShowOutput] = useState(false);
  const [copySuccess, setCopySuccess] = useState(false);
  const [showShareDialog, setShowShareDialog] = useState(false);
  const { toast } = useToast();

  const form = useForm({
    resolver: zodResolver(dietaryAdviceRequestSchema),
    defaultValues: {
      name: "",
      age: "",
      gender: undefined,
      bodyWeight: "",
      dietaryHabit: "",
      healthProblem: "",
      medication: "",
      dailyActivities: "",
      healthGoal: "",
    },
  });

  const adviceMutation = useMutation({
    mutationFn: async (data: any): Promise<DietaryAdviceResponse> => {
      const response = await apiRequest("POST", "/api/dietary-advice", data);
      return response.json();
    },
    onSuccess: (data) => {
      setAiResponse(data);
      setShowOutput(true);
      // Scroll to output section
      setTimeout(() => {
        document.getElementById('outputSection')?.scrollIntoView({ 
          behavior: 'smooth', 
          block: 'start' 
        });
      }, 100);
    },
    onError: (error) => {
      toast({
        title: "Unable to get advice",
        description: error.message || "Please check your connection and try again.",
        variant: "destructive",
      });
    },
  });

  const onSubmit = (data: any) => {
    adviceMutation.mutate(data);
  };

  const handleCopy = async () => {
    if (aiResponse?.advice) {
      try {
        await navigator.clipboard.writeText(aiResponse.advice);
        setCopySuccess(true);
        toast({
          title: "Copied to clipboard",
          description: "The dietary advice has been copied to your clipboard.",
        });
        setTimeout(() => setCopySuccess(false), 2000);
      } catch (err) {
        toast({
          title: "Copy failed",
          description: "Unable to copy to clipboard. Please select and copy manually.",
          variant: "destructive",
        });
      }
    }
  };

  const handleNewQuestion = () => {
    form.reset();
    setAiResponse(null);
    setShowOutput(false);
    setShowShareDialog(false);
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  const shareViaEmail = () => {
    if (!aiResponse?.advice) return;
    const healthSummary = createHealthProfileSummary();
    const subject = encodeURIComponent('Personalized Dietary Advice');
    const body = encodeURIComponent(`Hi there!\n\nI wanted to share some personalized dietary advice I received:\n\n${healthSummary}\n\nAI RECOMMENDATIONS:\n${aiResponse.advice}\n\nThis was generated by an AI Dietary Advisor. Always consult healthcare professionals for medical dietary concerns.\n\nBest regards!`);
    window.open(`mailto:?subject=${subject}&body=${body}`);
    setShowShareDialog(false);
    toast({
      title: "Email opened",
      description: "Your email client should open with the complete health profile and dietary advice ready to send.",
    });
  };

  const shareViaWhatsApp = () => {
    if (!aiResponse?.advice) return;
    const healthSummary = createHealthProfileSummary();
    const text = encodeURIComponent(`ü•ó Personalized Dietary Advice\n\n${healthSummary}\n\nü§ñ AI Recommendations:\n${aiResponse.advice}\n\nüí° Generated by AI Dietary Advisor\n‚ö†Ô∏è Always consult healthcare professionals for medical dietary concerns.`);
    window.open(`https://wa.me/?text=${text}`);
    setShowShareDialog(false);
    toast({
      title: "WhatsApp opened",
      description: "WhatsApp should open with your complete health profile and dietary advice ready to send.",
    });
  };

  const shareViaMessenger = () => {
    if (!aiResponse?.advice) return;
    const healthSummary = createHealthProfileSummary();
    const text = encodeURIComponent(`ü•ó Personalized Dietary Advice\n\n${healthSummary}\n\nü§ñ AI Recommendations:\n${aiResponse.advice}\n\nüí° Generated by AI Dietary Advisor\n‚ö†Ô∏è Always consult healthcare professionals for medical dietary concerns.`);
    window.open(`https://www.messenger.com/t/?text=${text}`);
    setShowShareDialog(false);
    toast({
      title: "Messenger opened",
      description: "Facebook Messenger should open with your complete health profile and dietary advice ready to send.",
    });
  };

  const createHealthProfileSummary = () => {
    const formData = form.getValues();
    return `üìã Health Profile Summary:
‚Ä¢ Name: ${formData.name}
‚Ä¢ Age: ${formData.age} years old
‚Ä¢ Gender: ${formData.gender}
‚Ä¢ Body Weight: ${formData.bodyWeight}
‚Ä¢ Dietary Habits: ${formData.dietaryHabit}
‚Ä¢ Daily Activities: ${formData.dailyActivities}
‚Ä¢ Health Goals: ${formData.healthGoal}${formData.healthProblem ? `\n‚Ä¢ Health Concerns: ${formData.healthProblem}` : ''}${formData.medication ? `\n‚Ä¢ Medications: ${formData.medication}` : ''}`;
  };

  const handleShare = async () => {
    if (!aiResponse?.advice) return;

    const healthSummary = createHealthProfileSummary();
    const shareText = `ü•ó Personalized Dietary Advice\n\n${healthSummary}\n\nü§ñ AI Recommendations:\n${aiResponse.advice}\n\nüí° Generated by AI Dietary Advisor\n‚ö†Ô∏è Always consult healthcare professionals for medical dietary concerns.`;
    
    // Try native sharing first (mobile devices)
    if (navigator.share) {
      try {
        await navigator.share({
          title: 'ü•ó AI Dietary Advice',
          text: shareText,
        });
        toast({
          title: "Shared successfully",
          description: "Your health profile and dietary advice have been shared!",
        });
        return;
      } catch (error) {
        // User cancelled or error occurred, fall through to other methods
      }
    }

    // Fallback: Copy to clipboard
    try {
      await navigator.clipboard.writeText(shareText);
      toast({
        title: "Copied for sharing",
        description: "Health profile and dietary advice copied to clipboard. You can now paste it in messages, emails, or social media.",
      });
    } catch (error) {
      // Final fallback: Show share options
      setShowShareDialog(true);
    }
  };



  return (
    <div className="bg-gray-50 min-h-screen">
      {/* Header */}
      <header className="bg-white shadow-sm border-b border-gray-200">
        <div className="max-w-4xl mx-auto px-4 py-6">
          <div className="flex items-center space-x-3">
            <div className="bg-primary text-white p-3 rounded-xl">
              <Utensils className="h-6 w-6" />
            </div>
            <div>
              <h1 className="text-2xl font-bold text-gray-900">AI Dietary Advisor</h1>
              <p className="text-gray-600 text-sm">Get personalized dietary advice powered by AI</p>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-4xl mx-auto px-4 py-8">
        {/* Intro Section */}
        <Card className="mb-8">
          <CardContent className="p-6">
            <div className="flex items-start space-x-4">
              <div className="bg-blue-50 p-3 rounded-xl">
                <Info className="h-6 w-6 text-blue-600" />
              </div>
              <div>
                <h2 className="text-lg font-semibold text-gray-900 mb-2">Get Personalized Dietary Advice</h2>
                <p className="text-gray-600 leading-relaxed">
                  Fill out your health profile below to receive personalized dietary recommendations from our AI nutritionist. 
                  The more detailed information you provide, the more tailored your advice will be. Always consult with healthcare 
                  professionals for medical dietary concerns.
                </p>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Health Profile Form */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center text-xl text-gray-900">
              <User className="h-5 w-5 text-primary mr-2" />
              Health Profile Assessment
            </CardTitle>
          </CardHeader>
          <CardContent className="p-6">
            <Form {...form}>
              <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
                {/* Personal Information Section */}
                <div className="grid md:grid-cols-2 gap-6">
                  <FormField
                    control={form.control}
                    name="name"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="flex items-center text-sm font-medium text-gray-700">
                          <User className="h-4 w-4 text-primary mr-2" />
                          Full Name
                        </FormLabel>
                        <FormControl>
                          <Input placeholder="Enter your full name" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="age"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="flex items-center text-sm font-medium text-gray-700">
                          <Calendar className="h-4 w-4 text-primary mr-2" />
                          Age
                        </FormLabel>
                        <FormControl>
                          <Input placeholder="Enter your age" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>

                {/* Gender Selection */}
                <FormField
                  control={form.control}
                  name="gender"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="flex items-center text-sm font-medium text-gray-700">
                        <Users className="h-4 w-4 text-primary mr-2" />
                        Gender
                      </FormLabel>
                      <FormControl>
                        <RadioGroup
                          onValueChange={field.onChange}
                          value={field.value}
                          className="flex space-x-6"
                        >
                          <div className="flex items-center space-x-2">
                            <RadioGroupItem value="male" id="male" />
                            <Label htmlFor="male">Male</Label>
                          </div>
                          <div className="flex items-center space-x-2">
                            <RadioGroupItem value="female" id="female" />
                            <Label htmlFor="female">Female</Label>
                          </div>
                          <div className="flex items-center space-x-2">
                            <RadioGroupItem value="other" id="other" />
                            <Label htmlFor="other">Other</Label>
                          </div>
                        </RadioGroup>
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {/* Body Weight and Physical Information */}
                <FormField
                  control={form.control}
                  name="bodyWeight"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="flex items-center text-sm font-medium text-gray-700">
                        <Weight className="h-4 w-4 text-primary mr-2" />
                        Body Weight & Physical Stats
                      </FormLabel>
                      <FormControl>
                        <Input 
                          placeholder="e.g., 70kg, 5'8&quot; 150lbs, BMI 22" 
                          {...field} 
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {/* Dietary Information */}
                <div className="grid md:grid-cols-2 gap-6">
                  <FormField
                    control={form.control}
                    name="dietaryHabit"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="flex items-center text-sm font-medium text-gray-700">
                          <Apple className="h-4 w-4 text-primary mr-2" />
                          Current Dietary Habits
                        </FormLabel>
                        <FormControl>
                          <Input 
                            placeholder="e.g., Vegetarian, Mediterranean, Low-carb"
                            {...field} 
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="dailyActivities"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="flex items-center text-sm font-medium text-gray-700">
                          <Activity className="h-4 w-4 text-primary mr-2" />
                          Daily Activities & Exercise
                        </FormLabel>
                        <FormControl>
                          <Input 
                            placeholder="e.g., Sedentary, Gym 3x/week, Active job"
                            {...field} 
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>

                {/* Health Information */}
                <div className="grid md:grid-cols-2 gap-6">
                  <FormField
                    control={form.control}
                    name="healthProblem"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="flex items-center text-sm font-medium text-gray-700">
                          <Heart className="h-4 w-4 text-primary mr-2" />
                          Health Problems (Optional)
                        </FormLabel>
                        <FormControl>
                          <Textarea 
                            placeholder="e.g., Diabetes, High blood pressure, Allergies..."
                            rows={3}
                            {...field} 
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="medication"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="flex items-center text-sm font-medium text-gray-700">
                          <Pill className="h-4 w-4 text-primary mr-2" />
                          Current Medications (Optional)
                        </FormLabel>
                        <FormControl>
                          <Input 
                            placeholder="e.g., Metformin, Vitamins, None"
                            {...field} 
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>

                {/* Health Goals */}
                <FormField
                  control={form.control}
                  name="healthGoal"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="flex items-center text-sm font-medium text-gray-700">
                        <Target className="h-4 w-4 text-primary mr-2" />
                        Health & Nutrition Goals
                      </FormLabel>
                      <FormControl>
                        <Textarea 
                          placeholder="e.g., Lose weight, Build muscle, Improve energy, Manage diabetes, Lower cholesterol..."
                          rows={3}
                          {...field} 
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <div className="flex flex-col items-center space-y-4">
                  <p className="text-xs text-gray-500 flex items-center">
                    <Shield className="h-3 w-3 text-green-500 mr-1" />
                    Your health information is processed securely and not stored
                  </p>
                  
                  <Button 
                    type="submit" 
                    disabled={adviceMutation.isPending}
                    className="bg-primary hover:bg-emerald-700 text-white font-medium px-12 py-3 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    <Brain className="h-4 w-4 mr-2" />
                    Get Personalized Dietary Advice
                  </Button>
                </div>
              </form>
            </Form>

            {/* Loading State */}
            {adviceMutation.isPending && (
              <div className="mt-6 p-4 bg-blue-50 rounded-xl border border-blue-200">
                <div className="flex items-center space-x-3">
                  <div className="animate-spin">
                    <Settings className="h-5 w-5 text-blue-600" />
                  </div>
                  <div>
                    <p className="text-blue-800 font-medium">Processing your request</p>
                    <p className="text-blue-600 text-sm loading-dots">Analyzing your dietary information</p>
                  </div>
                </div>
              </div>
            )}

            {/* Error State */}
            {adviceMutation.isError && (
              <div className="mt-6 p-4 bg-red-50 rounded-xl border border-red-200">
                <div className="flex items-start space-x-3">
                  <TriangleAlert className="h-5 w-5 text-red-600 mt-0.5" />
                  <div>
                    <p className="text-red-800 font-medium">Unable to get advice</p>
                    <p className="text-red-600 text-sm">
                      {adviceMutation.error?.message || "Please check your connection and try again. If the problem persists, the service may be temporarily unavailable."}
                    </p>
                    <button 
                      onClick={() => form.handleSubmit(onSubmit)()}
                      className="mt-2 text-red-600 hover:text-red-700 text-sm font-medium underline"
                    >
                      Try again
                    </button>
                  </div>
                </div>
              </div>
            )}

            {/* Output Section */}
            {showOutput && aiResponse && (
              <div id="outputSection" className="mt-8">
                <div className="border-t border-gray-200 pt-6">
                  <label className="block text-sm font-medium text-gray-700 mb-3">
                    <Bot className="inline h-4 w-4 text-secondary mr-2" />
                    Personalized Dietary Recommendations
                  </label>
                  <div className="relative">
                    <div className="bg-gradient-to-r from-green-50 to-blue-50 rounded-xl p-1">
                      <Textarea 
                        value={aiResponse.advice}
                        rows={8} 
                        className="bg-white border-0 resize-none focus:ring-2 focus:ring-secondary transition-all duration-200" 
                        readOnly
                        placeholder="Your personalized dietary recommendations will appear here..."
                      />
                    </div>
                    <div className="flex justify-between items-center mt-3">
                      <p className="text-xs text-gray-500 flex items-center">
                        <Clock className="h-3 w-3 mr-1" />
                        Generated in {aiResponse.processingTime} seconds
                      </p>
                      <button 
                        onClick={handleCopy}
                        className="text-xs text-gray-500 hover:text-gray-700 flex items-center space-x-1 px-2 py-1 rounded hover:bg-gray-100 transition-colors"
                      >
                        {copySuccess ? <Check className="h-3 w-3" /> : <Copy className="h-3 w-3" />}
                        <span>{copySuccess ? 'Copied!' : 'Copy'}</span>
                      </button>
                    </div>
                  </div>
                </div>

                {/* Disclaimer Section */}
                <Alert className="mt-6 bg-amber-50 border-amber-200">
                  <TriangleAlert className="h-4 w-4 text-amber-600" />
                  <AlertDescription className="text-amber-800">
                    <p className="font-medium text-sm">Important Disclaimer</p>
                    <p className="text-xs mt-1 leading-relaxed text-amber-700">
                      This advice is AI-generated and for informational purposes only. Always consult with qualified healthcare professionals, 
                      registered dietitians, or your doctor before making significant dietary changes, especially if you have health conditions, 
                      allergies, or are taking medications.
                    </p>
                  </AlertDescription>
                </Alert>

                {/* Action Buttons */}
                <div className="flex justify-center space-x-4 mt-6">
                  <Button 
                    onClick={handleNewQuestion}
                    variant="outline"
                    className="font-medium px-6 py-2 flex items-center space-x-2"
                  >
                    <Plus className="h-4 w-4" />
                    <span>Ask Another Question</span>
                  </Button>
                  <Button 
                    onClick={handleShare}
                    className="bg-secondary hover:bg-teal-700 text-white font-medium px-6 py-2 flex items-center space-x-2"
                  >
                    <Share className="h-4 w-4" />
                    <span>Share Advice</span>
                  </Button>
                </div>

                {/* Share Dialog */}
                <Dialog open={showShareDialog} onOpenChange={setShowShareDialog}>
                  <DialogContent className="sm:max-w-md">
                    <DialogHeader>
                      <DialogTitle className="flex items-center">
                        <Share className="h-5 w-5 text-secondary mr-2" />
                        Share Your Dietary Advice
                      </DialogTitle>
                      <DialogDescription>
                        Choose how you'd like to share your complete health profile and personalized dietary recommendations with friends and family.
                      </DialogDescription>
                    </DialogHeader>
                    <div className="grid gap-4 py-4">
                      <Button
                        onClick={shareViaEmail}
                        variant="outline"
                        className="w-full justify-start px-4 py-3 h-auto"
                      >
                        <Mail className="h-5 w-5 text-blue-600 mr-3" />
                        <div className="text-left">
                          <div className="font-medium">Email</div>
                          <div className="text-xs text-gray-500">Send via your email client</div>
                        </div>
                      </Button>
                      
                      <Button
                        onClick={shareViaWhatsApp}
                        variant="outline"
                        className="w-full justify-start px-4 py-3 h-auto"
                      >
                        <MessageCircle className="h-5 w-5 text-green-600 mr-3" />
                        <div className="text-left">
                          <div className="font-medium">WhatsApp</div>
                          <div className="text-xs text-gray-500">Share via WhatsApp</div>
                        </div>
                      </Button>
                      
                      <Button
                        onClick={shareViaMessenger}
                        variant="outline"
                        className="w-full justify-start px-4 py-3 h-auto"
                      >
                        <MessageCircle className="h-5 w-5 text-blue-500 mr-3" />
                        <div className="text-left">
                          <div className="font-medium">Facebook Messenger</div>
                          <div className="text-xs text-gray-500">Share via Messenger</div>
                        </div>
                      </Button>
                      
                      <Button
                        onClick={async () => {
                          if (!aiResponse?.advice) return;
                          const healthSummary = createHealthProfileSummary();
                          const shareText = `ü•ó Personalized Dietary Advice\n\n${healthSummary}\n\nü§ñ AI Recommendations:\n${aiResponse.advice}\n\nüí° Generated by AI Dietary Advisor\n‚ö†Ô∏è Always consult healthcare professionals for medical dietary concerns.`;
                          try {
                            await navigator.clipboard.writeText(shareText);
                            setShowShareDialog(false);
                            toast({
                              title: "Copied to clipboard",
                              description: "Complete health profile and dietary advice copied. You can now paste this anywhere you'd like to share it.",
                            });
                          } catch (error) {
                            toast({
                              title: "Copy failed",
                              description: "Please select and copy the text manually.",
                              variant: "destructive",
                            });
                          }
                        }}
                        variant="outline"
                        className="w-full justify-start px-4 py-3 h-auto"
                      >
                        <Copy className="h-5 w-5 text-gray-600 mr-3" />
                        <div className="text-left">
                          <div className="font-medium">Copy to Clipboard</div>
                          <div className="text-xs text-gray-500">Copy complete profile and advice to share anywhere</div>
                        </div>
                      </Button>
                    </div>
                    <div className="flex justify-end">
                      <Button
                        variant="ghost"
                        onClick={() => setShowShareDialog(false)}
                        className="flex items-center space-x-2"
                      >
                        <X className="h-4 w-4" />
                        <span>Cancel</span>
                      </Button>
                    </div>
                  </DialogContent>
                </Dialog>
              </div>
            )}
          </CardContent>
        </Card>

        {/* Tips Section */}
        <div className="mt-8 grid md:grid-cols-3 gap-6">
          <Card>
            <CardContent className="p-6">
              <div className="bg-green-50 p-3 rounded-xl w-fit mb-4">
                <Lightbulb className="h-5 w-5 text-green-600" />
              </div>
              <h3 className="font-semibold text-gray-900 mb-2">Complete Profile</h3>
              <p className="text-gray-600 text-sm">Fill out all sections of your health profile for the most accurate and personalized dietary recommendations.</p>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="bg-blue-50 p-3 rounded-xl w-fit mb-4">
                <UserCheck className="h-5 w-5 text-blue-600" />
              </div>
              <h3 className="font-semibold text-gray-900 mb-2">Professional Guidance</h3>
              <p className="text-gray-600 text-sm">Use AI advice as a starting point, then consult with healthcare professionals for personalized plans.</p>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="bg-purple-50 p-3 rounded-xl w-fit mb-4">
                <TrendingUp className="h-5 w-5 text-purple-600" />
              </div>
              <h3 className="font-semibold text-gray-900 mb-2">Track Progress</h3>
              <p className="text-gray-600 text-sm">Monitor how dietary changes affect your energy, performance, and overall well-being.</p>
            </CardContent>
          </Card>
        </div>
      </main>

      {/* Footer */}
      <footer className="bg-white border-t border-gray-200 mt-16">
        <div className="max-w-4xl mx-auto px-4 py-8">
          <div className="text-center">
            <p className="text-gray-500 text-sm">
              ¬© 2024 AI Dietary Advisor. This tool provides general information only and is not a substitute for professional medical advice.
            </p>
            <div className="flex justify-center space-x-6 mt-4">
              <a href="#" className="text-gray-400 hover:text-gray-600 text-sm">Privacy Policy</a>
              <a href="#" className="text-gray-400 hover:text-gray-600 text-sm">Terms of Service</a>
              <a href="#" className="text-gray-400 hover:text-gray-600 text-sm">Contact</a>
            </div>
          </div>
        </div>
      </footer>
    </div>
  );
}
