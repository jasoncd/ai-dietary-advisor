import { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
import { 
  Utensils, 
  Info, 
  User, 
  Calendar,
  Users,
  Weight,
  Apple,
  Heart,
  Pill,
  Activity,
  Target,
  Brain, 
  Settings, 
  TriangleAlert, 
  Bot, 
  Clock, 
  Copy, 
  Plus, 
  Share, 
  Lightbulb, 
  UserCheck, 
  TrendingUp,
  Shield,
  Check,
  Mail,
  MessageCircle,
  ExternalLink,
  X,
  Save,
  Database
} from "lucide-react";
import { dietaryAdviceRequestSchema, type DietaryAdviceResponse } from "@shared/schema";
import { Link } from "wouter";

export default function Home() {
  const [aiResponse, setAiResponse] = useState<DietaryAdviceResponse | null>(null);
  const [showOutput, setShowOutput] = useState(false);
  const [copySuccess, setCopySuccess] = useState(false);
  const [showShareDialog, setShowShareDialog] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const { toast } = useToast();

  const form = useForm({
    resolver: zodResolver(dietaryAdviceRequestSchema),
    defaultValues: {
      name: "",
      age: "",
      gender: "male" as const,
      bodyWeight: "",
      dietaryHabit: "",
      healthProblem: "",
      medication: "",
      dailyActivities: "",
      healthGoal: "",
    },
  });

  const onSubmit = async (formData: any) => {
    try {
      setAiResponse(null);
      setShowOutput(true);
      
      const response = await apiRequest("POST", "/api/dietary-advice", formData);
      const responseData = await response.json();
      setAiResponse(responseData as DietaryAdviceResponse);
    } catch (error) {
      console.error("Error:", error);
      toast({
        title: "Error",
        description: "Failed to get dietary advice. Please try again.",
        variant: "destructive",
      });
    }
  };

  const handleCopy = () => {
    if (aiResponse?.advice) {
      navigator.clipboard.writeText(aiResponse.advice);
      setCopySuccess(true);
      setTimeout(() => setCopySuccess(false), 2000);
      toast({
        title: "Copied!",
        description: "Dietary advice has been copied to your clipboard.",
      });
    }
  };

  const handleNewQuestion = () => {
    form.reset();
    setAiResponse(null);
    setShowOutput(false);
    setShowShareDialog(false);
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  const createHealthProfileSummary = () => {
    const formData = form.getValues();
    const now = new Date();
    const dateStr = now.toLocaleDateString('en-US', { 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
    });
    const timeStr = now.toLocaleTimeString('en-US', { 
      hour: '2-digit', 
      minute: '2-digit',
      hour12: true 
    });
    
    return `üìã Health Profile Summary (Generated: ${dateStr} at ${timeStr}):
‚Ä¢ Name: ${formData.name}
‚Ä¢ Age: ${formData.age} years old
‚Ä¢ Gender: ${formData.gender}
‚Ä¢ Body Weight: ${formData.bodyWeight}
‚Ä¢ Dietary Habits: ${formData.dietaryHabit}
‚Ä¢ Daily Activities: ${formData.dailyActivities}
‚Ä¢ Health Goals: ${formData.healthGoal}${formData.healthProblem ? `\n‚Ä¢ Health Concerns: ${formData.healthProblem}` : ''}${formData.medication ? `\n‚Ä¢ Medications: ${formData.medication}` : ''}`;
  };

  const handleShare = async () => {
    if (!aiResponse?.advice) return;

    const healthSummary = createHealthProfileSummary();
    const now = new Date();
    const timestamp = now.toLocaleString('en-US', { 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric',
      hour: '2-digit', 
      minute: '2-digit',
      hour12: true 
    });
    
    const shareText = `ü•ó Personalized Dietary Advice\n\n${healthSummary}\n\nü§ñ AI Recommendations:\n${aiResponse.advice}\n\nüí° Generated by AI Dietary Advisor on ${timestamp}\n‚ö†Ô∏è Always consult healthcare professionals for medical dietary concerns.`;
    
    // Try native sharing first (mobile devices)
    if (navigator.share) {
      try {
        await navigator.share({
          title: 'ü•ó AI Dietary Advice',
          text: shareText,
        });
        toast({
          title: "Shared successfully",
          description: "Your health profile and dietary advice have been shared!",
        });
        return;
      } catch (error) {
        // User cancelled or error occurred, fall through to other methods
      }
    }

    // Fallback: Copy to clipboard
    try {
      await navigator.clipboard.writeText(shareText);
      toast({
        title: "Copied for sharing",
        description: "Health profile and dietary advice copied to clipboard. You can now paste it in messages, emails, or social media.",
      });
    } catch (error) {
      // Final fallback: Show share options
      setShowShareDialog(true);
    }
  };

  const shareViaEmail = () => {
    if (!aiResponse?.advice) return;
    const healthSummary = createHealthProfileSummary();
    const now = new Date();
    const timestamp = now.toLocaleString('en-US', { 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric',
      hour: '2-digit', 
      minute: '2-digit',
      hour12: true 
    });
    const subject = encodeURIComponent('Personalized Dietary Advice');
    const body = encodeURIComponent(`Hi there!\n\nI wanted to share some personalized dietary advice I received:\n\n${healthSummary}\n\nAI RECOMMENDATIONS:\n${aiResponse.advice}\n\nThis was generated by an AI Dietary Advisor on ${timestamp}. Always consult healthcare professionals for medical dietary concerns.\n\nBest regards!`);
    window.open(`mailto:?subject=${subject}&body=${body}`);
    setShowShareDialog(false);
    toast({
      title: "Email opened",
      description: "Your email client should open with the complete health profile and dietary advice ready to send.",
    });
  };

  const shareViaWhatsApp = () => {
    if (!aiResponse?.advice) return;
    const healthSummary = createHealthProfileSummary();
    const now = new Date();
    const timestamp = now.toLocaleString('en-US', { 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric',
      hour: '2-digit', 
      minute: '2-digit',
      hour12: true 
    });
    const text = encodeURIComponent(`ü•ó Personalized Dietary Advice\n\n${healthSummary}\n\nü§ñ AI Recommendations:\n${aiResponse.advice}\n\nüí° Generated by AI Dietary Advisor on ${timestamp}\n‚ö†Ô∏è Always consult healthcare professionals for medical dietary concerns.`);
    window.open(`https://wa.me/?text=${text}`);
    setShowShareDialog(false);
    toast({
      title: "WhatsApp opened",
      description: "WhatsApp should open with your complete health profile and dietary advice ready to send.",
    });
  };

  const shareViaMessenger = () => {
    if (!aiResponse?.advice) return;
    const healthSummary = createHealthProfileSummary();
    const now = new Date();
    const timestamp = now.toLocaleString('en-US', { 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric',
      hour: '2-digit', 
      minute: '2-digit',
      hour12: true 
    });
    const text = encodeURIComponent(`ü•ó Personalized Dietary Advice\n\n${healthSummary}\n\nü§ñ AI Recommendations:\n${aiResponse.advice}\n\nüí° Generated by AI Dietary Advisor on ${timestamp}\n‚ö†Ô∏è Always consult healthcare professionals for medical dietary concerns.`);
    window.open(`https://www.messenger.com/t/?text=${text}`);
    setShowShareDialog(false);
    toast({
      title: "Messenger opened",
      description: "Facebook Messenger should open with your complete health profile and dietary advice ready to send.",
    });
  };

  const handleSaveToDatabase = async () => {
    if (!aiResponse?.advice) return;

    setIsSaving(true);
    try {
      const formData = form.getValues();
      const healthSummary = createHealthProfileSummary();
      const now = new Date();
      const timestamp = now.toLocaleString('en-US', { 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric',
        hour: '2-digit', 
        minute: '2-digit',
        hour12: true 
      });
      
      const shareText = `ü•ó Personalized Dietary Advice\n\n${healthSummary}\n\nü§ñ AI Recommendations:\n${aiResponse.advice}\n\nüí° Generated by AI Dietary Advisor on ${timestamp}\n‚ö†Ô∏è Always consult healthcare professionals for medical dietary concerns.`;

      const profileData = {
        name: formData.name,
        age: parseInt(String(formData.age)),
        gender: formData.gender,
        bodyWeight: formData.bodyWeight,
        dietaryHabit: formData.dietaryHabit,
        healthProblem: formData.healthProblem || null,
        medication: formData.medication || null,
        dailyActivities: formData.dailyActivities,
        healthGoal: formData.healthGoal,
        aiAdvice: aiResponse.advice,
        shareText: shareText,
      };

      await apiRequest("POST", "/api/health-profiles", profileData);

      toast({
        title: "Saved successfully",
        description: "Your health profile and dietary advice have been saved to the database.",
      });
    } catch (error) {
      console.error("Error saving to database:", error);
      toast({
        title: "Save failed",
        description: "Failed to save to database. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsSaving(false);
    }
  };

  return (
    <div className="bg-gray-50 min-h-screen">
      {/* Header */}
      <header className="bg-white shadow-sm border-b border-gray-200">
        <div className="max-w-4xl mx-auto px-4 py-6">
          <div className="flex items-center space-x-3">
            <div className="bg-primary text-white p-3 rounded-xl">
              <Utensils className="h-6 w-6" />
            </div>
            <div>
              <h1 className="text-2xl font-bold text-gray-900">AI Dietary Advisor</h1>
              <p className="text-gray-600">Get personalized dietary recommendations</p>
            </div>
            <div className="ml-auto">
              <Link href="/records">
                <Button variant="outline" className="flex items-center space-x-2">
                  <Database className="h-4 w-4" />
                  <span>View Records</span>
                </Button>
              </Link>
            </div>
          </div>
        </div>
      </header>

      <div className="container mx-auto px-4 py-8 max-w-4xl">
        {/* Form Card */}
        <Card className="mb-8">
          <CardContent className="p-6">
            <div className="flex items-start space-x-4">
              <div className="bg-blue-50 p-3 rounded-xl">
                <Info className="h-6 w-6 text-blue-600" />
              </div>
              <div>
                <h2 className="text-lg font-semibold text-gray-900 mb-2">Get Personalized Dietary Advice</h2>
                <p className="text-gray-600 leading-relaxed">
                  Fill out your health profile below to receive personalized dietary recommendations from our AI nutritionist. 
                  The more detailed information you provide, the more tailored your advice will be. Always consult with healthcare 
                  professionals for medical dietary concerns.
                </p>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Health Profile Form */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center text-xl text-gray-900">
              <User className="h-5 w-5 text-primary mr-2" />
              Health Profile Assessment
            </CardTitle>
          </CardHeader>
          <CardContent className="p-6">
            <Form {...form}>
              <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
                {/* Personal Information Section */}
                <div className="grid md:grid-cols-2 gap-6">
                  <FormField
                    control={form.control}
                    name="name"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="flex items-center text-sm font-medium text-gray-700">
                          <User className="h-4 w-4 mr-2 text-primary" />
                          Full Name
                        </FormLabel>
                        <FormControl>
                          <Input 
                            placeholder="Enter your full name" 
                            {...field} 
                            className="h-11"
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="age"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="flex items-center text-sm font-medium text-gray-700">
                          <Calendar className="h-4 w-4 mr-2 text-primary" />
                          Age
                        </FormLabel>
                        <FormControl>
                          <Input 
                            type="number" 
                            placeholder="Enter your age" 
                            {...field} 
                            className="h-11"
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>

                <div className="grid md:grid-cols-2 gap-6">
                  <FormField
                    control={form.control}
                    name="gender"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="flex items-center text-sm font-medium text-gray-700">
                          <Users className="h-4 w-4 mr-2 text-primary" />
                          Gender
                        </FormLabel>
                        <FormControl>
                          <RadioGroup
                            onValueChange={field.onChange}
                            defaultValue={field.value}
                            className="flex space-x-6"
                          >
                            <div className="flex items-center space-x-2">
                              <RadioGroupItem value="male" id="male" />
                              <Label htmlFor="male">Male</Label>
                            </div>
                            <div className="flex items-center space-x-2">
                              <RadioGroupItem value="female" id="female" />
                              <Label htmlFor="female">Female</Label>
                            </div>
                            <div className="flex items-center space-x-2">
                              <RadioGroupItem value="other" id="other" />
                              <Label htmlFor="other">Other</Label>
                            </div>
                          </RadioGroup>
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="bodyWeight"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="flex items-center text-sm font-medium text-gray-700">
                          <Weight className="h-4 w-4 mr-2 text-primary" />
                          Body Weight
                        </FormLabel>
                        <FormControl>
                          <Input 
                            placeholder="e.g., 70kg, 150lbs" 
                            {...field} 
                            className="h-11"
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>

                {/* Dietary Information Section */}
                <div className="space-y-6">
                  <FormField
                    control={form.control}
                    name="dietaryHabit"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="flex items-center text-sm font-medium text-gray-700">
                          <Apple className="h-4 w-4 mr-2 text-primary" />
                          Current Dietary Habits
                        </FormLabel>
                        <FormControl>
                          <Textarea 
                            placeholder="Describe your current eating patterns, food preferences, meal timing, etc." 
                            {...field} 
                            rows={3}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="healthProblem"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="flex items-center text-sm font-medium text-gray-700">
                          <Heart className="h-4 w-4 mr-2 text-primary" />
                          Health Problems or Conditions (Optional)
                        </FormLabel>
                        <FormControl>
                          <Textarea 
                            placeholder="Any health conditions, allergies, or medical concerns we should know about..." 
                            {...field} 
                            rows={3}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="medication"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="flex items-center text-sm font-medium text-gray-700">
                          <Pill className="h-4 w-4 mr-2 text-primary" />
                          Current Medications (Optional)
                        </FormLabel>
                        <FormControl>
                          <Textarea 
                            placeholder="List any medications, supplements, or vitamins you're currently taking..." 
                            {...field} 
                            rows={2}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="dailyActivities"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="flex items-center text-sm font-medium text-gray-700">
                          <Activity className="h-4 w-4 mr-2 text-primary" />
                          Daily Activities & Exercise
                        </FormLabel>
                        <FormControl>
                          <Textarea 
                            placeholder="Describe your daily routine, work type, exercise habits, activity level..." 
                            {...field} 
                            rows={3}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="healthGoal"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="flex items-center text-sm font-medium text-gray-700">
                          <Target className="h-4 w-4 mr-2 text-primary" />
                          Health & Wellness Goals
                        </FormLabel>
                        <FormControl>
                          <Textarea 
                            placeholder="What are your main health goals? (e.g., weight management, energy boost, muscle gain, better digestion...)" 
                            {...field} 
                            rows={3}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>

                {/* Submit Button */}
                <div className="text-center pt-4">
                  <Button 
                    type="submit" 
                    size="lg" 
                    className="bg-primary hover:bg-primary/90 text-white px-8 py-3 text-lg font-medium"
                    disabled={form.formState.isSubmitting}
                  >
                    {form.formState.isSubmitting ? (
                      <>
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                        Generating Advice...
                      </>
                    ) : (
                      <>
                        <Brain className="h-5 w-5 mr-2" />
                        Get Personalized Dietary Advice
                      </>
                    )}
                  </Button>
                </div>
              </form>
            </Form>
          </CardContent>
        </Card>

        {/* AI Response Section */}
        {showOutput && (
          <div className="mt-8">
            <Card className="border-l-4 border-l-primary">
              <CardHeader>
                <CardTitle className="flex items-center text-xl text-gray-900">
                  <Bot className="h-6 w-6 text-primary mr-2" />
                  Your Personalized Dietary Recommendations
                </CardTitle>
              </CardHeader>
              <CardContent className="p-6">
                {!aiResponse ? (
                  <div className="flex items-center justify-center py-12">
                    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mr-3"></div>
                    <span className="text-gray-600">Analyzing your health profile and generating personalized advice...</span>
                  </div>
                ) : (
                  <div className="space-y-6">
                    <div className="bg-green-50 p-6 rounded-lg">
                      <div className="whitespace-pre-wrap text-gray-800 leading-relaxed">
                        {aiResponse.advice}
                      </div>
                    </div>

                    {/* Processing Time */}
                    <div className="flex items-center text-sm text-gray-500">
                      <Clock className="h-4 w-4 mr-1" />
                      <span>Processed in {aiResponse.processingTime}s</span>
                    </div>

                    {/* Copy Button */}
                    <div className="flex justify-center">
                      <Button 
                        onClick={handleCopy}
                        variant="outline"
                        className="flex items-center space-x-2"
                      >
                        {copySuccess ? (
                          <>
                            <Check className="h-4 w-4 text-green-600" />
                            <span>Copied!</span>
                          </>
                        ) : (
                          <>
                            <Copy className="h-4 w-4" />
                            <span>Copy Advice</span>
                          </>
                        )}
                      </Button>
                    </div>

                    {/* Important Disclaimer */}
                    <Alert>
                      <TriangleAlert className="h-4 w-4" />
                      <AlertDescription>
                        <strong>Important Medical Disclaimer:</strong> This AI-generated advice is for informational purposes only and should not replace professional medical advice, diagnosis, or treatment. Always consult with qualified healthcare professionals, registered dietitians, or your doctor before making significant changes to your diet, especially if you have health conditions or take medications.
                        <p className="mt-2 text-sm text-gray-600">
                          For serious health concerns, allergies, or medical conditions, please seek personalized guidance from certified nutrition professionals.
                        </p>
                      </AlertDescription>
                    </Alert>

                    {/* Action Buttons */}
                    <div className="flex justify-center space-x-3 mt-6 flex-wrap gap-y-3">
                      <Button 
                        onClick={handleNewQuestion}
                        variant="outline"
                        className="font-medium px-6 py-2 flex items-center space-x-2"
                      >
                        <Plus className="h-4 w-4" />
                        <span>Ask Another Question</span>
                      </Button>
                      <Button 
                        onClick={handleSaveToDatabase}
                        disabled={isSaving}
                        variant="outline"
                        className="font-medium px-6 py-2 flex items-center space-x-2 border-green-600 text-green-600 hover:bg-green-50"
                      >
                        <Save className="h-4 w-4" />
                        <span>{isSaving ? "Saving..." : "Save to Database"}</span>
                      </Button>
                      <Button 
                        onClick={handleShare}
                        className="bg-secondary hover:bg-teal-700 text-white font-medium px-6 py-2 flex items-center space-x-2"
                      >
                        <Share className="h-4 w-4" />
                        <span>Share Advice</span>
                      </Button>
                    </div>

                    {/* Share Dialog */}
                    <Dialog open={showShareDialog} onOpenChange={setShowShareDialog}>
                      <DialogContent className="sm:max-w-md">
                        <DialogHeader>
                          <DialogTitle className="flex items-center">
                            <Share className="h-5 w-5 text-secondary mr-2" />
                            Share Your Dietary Advice
                          </DialogTitle>
                          <DialogDescription>
                            Choose how you'd like to share your complete health profile and personalized dietary recommendations with friends and family.
                          </DialogDescription>
                        </DialogHeader>
                        <div className="grid gap-4 py-4">
                          <Button
                            onClick={shareViaEmail}
                            variant="outline"
                            className="w-full justify-start px-4 py-3 h-auto"
                          >
                            <Mail className="h-5 w-5 text-blue-600 mr-3" />
                            <div className="text-left">
                              <div className="font-medium">Email</div>
                              <div className="text-xs text-gray-500">Send via your email client</div>
                            </div>
                          </Button>
                          
                          <Button
                            onClick={shareViaWhatsApp}
                            variant="outline"
                            className="w-full justify-start px-4 py-3 h-auto"
                          >
                            <MessageCircle className="h-5 w-5 text-green-600 mr-3" />
                            <div className="text-left">
                              <div className="font-medium">WhatsApp</div>
                              <div className="text-xs text-gray-500">Share via WhatsApp</div>
                            </div>
                          </Button>
                          
                          <Button
                            onClick={shareViaMessenger}
                            variant="outline"
                            className="w-full justify-start px-4 py-3 h-auto"
                          >
                            <MessageCircle className="h-5 w-5 text-blue-500 mr-3" />
                            <div className="text-left">
                              <div className="font-medium">Facebook Messenger</div>
                              <div className="text-xs text-gray-500">Share via Messenger</div>
                            </div>
                          </Button>
                          
                          <Button
                            onClick={async () => {
                              if (!aiResponse?.advice) return;
                              const healthSummary = createHealthProfileSummary();
                              const now = new Date();
                              const timestamp = now.toLocaleString('en-US', { 
                                year: 'numeric', 
                                month: 'long', 
                                day: 'numeric',
                                hour: '2-digit', 
                                minute: '2-digit',
                                hour12: true 
                              });
                              const shareText = `ü•ó Personalized Dietary Advice\n\n${healthSummary}\n\nü§ñ AI Recommendations:\n${aiResponse.advice}\n\nüí° Generated by AI Dietary Advisor on ${timestamp}\n‚ö†Ô∏è Always consult healthcare professionals for medical dietary concerns.`;
                              try {
                                await navigator.clipboard.writeText(shareText);
                                setShowShareDialog(false);
                                toast({
                                  title: "Copied to clipboard",
                                  description: "Complete health profile and dietary advice copied. You can now paste this anywhere you'd like to share it.",
                                });
                              } catch (error) {
                                toast({
                                  title: "Copy failed",
                                  description: "Please select and copy the text manually.",
                                  variant: "destructive",
                                });
                              }
                            }}
                            variant="outline"
                            className="w-full justify-start px-4 py-3 h-auto"
                          >
                            <Copy className="h-5 w-5 text-gray-600 mr-3" />
                            <div className="text-left">
                              <div className="font-medium">Copy to Clipboard</div>
                              <div className="text-xs text-gray-500">Copy complete profile and advice to share anywhere</div>
                            </div>
                          </Button>
                        </div>
                        <div className="flex justify-end">
                          <Button
                            variant="ghost"
                            onClick={() => setShowShareDialog(false)}
                            className="flex items-center space-x-2"
                          >
                            <X className="h-4 w-4" />
                            <span>Cancel</span>
                          </Button>
                        </div>
                      </DialogContent>
                    </Dialog>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        )}
      </div>
    </div>
  );
}